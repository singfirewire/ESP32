/*
 * ESP32_TimerRelay_Controller
 * Version: 1.1.1 (Switch detection fix)
 * 
 * Features:
 * - Dual relay timer control (40 minutes)
 * - Long press (2.5s) to force stop relay
 * - WiFi status monitoring
 * - Warning LED for last 3 minutes
 * - Emergency warning for last 30 seconds
 * - Switch debounce protection
 * - Status reporting via Serial
 * 
 * Last Updated: 22/12/2024
 */

#include <WiFi.h>
#include <HTTPClient.h>

// WiFi credentials
const char* ssid = "101-IOT";
const char* password = "10101010";

// Pin definitions
const int LED_WIFI_PIN = 2;      // LED แสดงสถานะ WiFi
const int LED_WARNING_PIN = 17;   // LED เตือนเวลา
const int SWITCH1_PIN = 22;      // สวิตช์ตัวที่ 1
const int SWITCH2_PIN = 23;      // สวิตช์ตัวที่ 2
const int RELAY1_PIN = 16;       // รีเลย์ตัวที่ 1
const int RELAY2_PIN = 19;       // รีเลย์ตัวที่ 2

// Timing configurations
const long FAST_BLINK = 200;              // Fast blink interval (ms)
const long SLOW_BLINK = 3000;             // Slow blink interval (ms)
const long CHECK_INTERVAL = 10000;        // Status check interval (ms)
const long COUNTDOWN_TIME = 40 * 60 * 1000; // 40 นาที
const long WARNING_TIME = 3 * 60 * 1000;    // 3 นาทีสุดท้าย
const long URGENT_TIME = 30 * 1000;         // 30 วินาทีสุดท้าย
const long WARNING_BLINK = 1000;            // กะพริบทุก 1 วินาที
const long URGENT_BLINK = 200;              // กะพริบเร็วทุก 0.2 วินาที
const long DEBOUNCE_DELAY = 50;            // ดีเลย์ป้องกันการกระเด้ง
const long LONG_PRESS_TIME = 2500;         // เวลากดค้าง 2.5 วินาที

// Variables for WiFi status
unsigned long previousMillis = 0;
bool ledState = LOW;
int connectionStatus = 0;

// Variables for relay control
unsigned long relay1StartTime = 0;
unsigned long relay2StartTime = 0;
bool relay1Active = false;
bool relay2Active = false;

// Variables for switch control
bool switch1LastState = HIGH;
bool switch2LastState = HIGH;
unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;

// Variables for long press detection
unsigned long switch1PressStart = 0;
unsigned long switch2PressStart = 0;
bool switch1LongPress = false;
bool switch2LongPress = false;

// Function to check internet connectivity
bool checkInternet() {
    HTTPClient http;
    http.begin("http://www.google.com");
    int httpCode = http.GET();
    http.end();
    return httpCode > 0;
}

void handleRelay1(bool switchPressed) {
    if (switchPressed) {
        if (!relay1Active) {  // ถ้ารีเลย์ปิดอยู่
            relay1Active = true;
            relay1StartTime = millis();
            digitalWrite(RELAY1_PIN, HIGH);
            Serial.println("Relay 1 activated - Timer started (40 minutes)");
        } else if (relay1Active && ((millis() - relay1StartTime) >= (COUNTDOWN_TIME - WARNING_TIME))) {
            // รีเซ็ตเวลาถ้าอยู่ในช่วง 3 นาทีสุดท้าย
            relay1StartTime = millis();
            Serial.println("Relay 1 timer reset - New 40 minutes countdown started");
        }
        Serial.print("Relay 1 state: ");
        Serial.println(digitalRead(RELAY1_PIN) ? "ON" : "OFF");
    }
}

void handleRelay2(bool switchPressed) {
    if (switchPressed) {
        if (!relay2Active) {  // ถ้ารีเลย์ปิดอยู่
            relay2Active = true;
            relay2StartTime = millis();
            digitalWrite(RELAY2_PIN, HIGH);
            Serial.println("Relay 2 activated - Timer started (40 minutes)");
        } else if (relay2Active && ((millis() - relay2StartTime) >= (COUNTDOWN_TIME - WARNING_TIME))) {
            // รีเซ็ตเวลาถ้าอยู่ในช่วง 3 นาทีสุดท้าย
            relay2StartTime = millis();
            Serial.println("Relay 2 timer reset - New 40 minutes countdown started");
        }
        Serial.print("Relay 2 state: ");
        Serial.println(digitalRead(RELAY2_PIN) ? "ON" : "OFF");
    }
}

void controlWarningLED(unsigned long remainingTime) {
    if (remainingTime <= WARNING_TIME) {  // อยู่ในช่วง 3 นาทีสุดท้าย
        if (remainingTime <= URGENT_TIME) {  // อยู่ในช่วง 30 วินาทีสุดท้าย
            if ((millis() % URGENT_BLINK) < (URGENT_BLINK/2)) {
                digitalWrite(LED_WARNING_PIN, HIGH);
            } else {
                digitalWrite(LED_WARNING_PIN, LOW);
            }
        } else {
            if ((millis() % WARNING_BLINK) < (WARNING_BLINK/2)) {
                digitalWrite(LED_WARNING_PIN, HIGH);
            } else {
                digitalWrite(LED_WARNING_PIN, LOW);
            }
        }
    } else {
        digitalWrite(LED_WARNING_PIN, LOW);
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);  // รอให้ Serial พร้อม
    Serial.println("Starting setup...");
    
    // Initialize pins
    pinMode(LED_WIFI_PIN, OUTPUT);
    pinMode(LED_WARNING_PIN, OUTPUT);
    pinMode(RELAY1_PIN, OUTPUT);
    pinMode(RELAY2_PIN, OUTPUT);
    pinMode(SWITCH1_PIN, INPUT_PULLUP);
    pinMode(SWITCH2_PIN, INPUT_PULLUP);
    
    // Set initial states
    digitalWrite(RELAY1_PIN, LOW);
    digitalWrite(RELAY2_PIN, LOW);
    digitalWrite(LED_WARNING_PIN, LOW);
    
    WiFi.begin(ssid, password);
    Serial.println("Setup complete.");
}

void loop() {
    unsigned long currentMillis = millis();
    
    // อ่านค่าสวิตช์
    bool switch1Reading = digitalRead(SWITCH1_PIN);
    bool switch2Reading = digitalRead(SWITCH2_PIN);

    // จัดการสวิตช์ 1
    if (switch1Reading != switch1LastState) {
        lastDebounceTime1 = currentMillis;
    }

    if ((currentMillis - lastDebounceTime1) > DEBOUNCE_DELAY) {
        // เมื่อมีการกดสวิตช์ (เปลี่ยนจาก HIGH เป็น LOW)
        if (switch1Reading == LOW && !switch1LongPress) {
            Serial.println("Switch 1 pressed - checking...");
            
            // ถ้าเป็นการกดครั้งแรก
            if (switch1PressStart == 0) {
                switch1PressStart = currentMillis;
                Serial.println("Starting press timer");
            }
            
            // ตรวจสอบการกดค้าง
            if ((currentMillis - switch1PressStart) >= LONG_PRESS_TIME) {
                if (relay1Active) {
                    relay1Active = false;
                    digitalWrite(RELAY1_PIN, LOW);
                    switch1LongPress = true;
                    Serial.println("Long press detected - Relay 1 forced OFF");
                }
            }
        }
        // เมื่อปล่อยสวิตช์
        else if (switch1Reading == HIGH) {
            // ถ้าไม่ใช่การกดค้าง และมีการกดมาก่อน
            if (!switch1LongPress && switch1PressStart > 0) {
                handleRelay1(true);
            }
            // รีเซ็ตตัวแปร
            switch1PressStart = 0;
            switch1LongPress = false;
        }
    }
    switch1LastState = switch1Reading;

    // จัดการสวิตช์ 2
    if (switch2Reading != switch2LastState) {
        lastDebounceTime2 = currentMillis;
    }

    if ((currentMillis - lastDebounceTime2) > DEBOUNCE_DELAY) {
        // เมื่อมีการกดสวิตช์ (เปลี่ยนจาก HIGH เป็น LOW)
        if (switch2Reading == LOW && !switch2LongPress) {
            Serial.println("Switch 2 pressed - checking...");
            
            // ถ้าเป็นการกดครั้งแรก
            if (switch2PressStart == 0) {
                switch2PressStart = currentMillis;
                Serial.println("Starting press timer");
            }
            
            // ตรวจสอบการกดค้าง
            if ((currentMillis - switch2PressStart) >= LONG_PRESS_TIME) {
                if (relay2Active) {
                    relay2Active = false;
                    digitalWrite(RELAY2_PIN, LOW);
                    switch2LongPress = true;
                    Serial.println("Long press detected - Relay 2 forced OFF");
                }
            }
        }
        // เมื่อปล่อยสวิตช์
        else if (switch2Reading == HIGH) {
            // ถ้าไม่ใช่การกดค้าง และมีการกดมาก่อน
            if (!switch2LongPress && switch2PressStart > 0) {
                handleRelay2(true);
            }
            // รีเซ็ตตัวแปร
            switch2PressStart = 0;
            switch2LongPress = false;
        }
    }
    switch2LastState = switch2Reading;
    
    // Check and update relay 1 status
    if (relay1Active) {
        unsigned long relay1Elapsed = currentMillis - relay1StartTime;
        if (relay1Elapsed >= COUNTDOWN_TIME) {
            relay1Active = false;
            digitalWrite(RELAY1_PIN, LOW);
            Serial.println("Relay 1 timer completed - turned OFF");
        } else {
            controlWarningLED(COUNTDOWN_TIME - relay1Elapsed);
        }
    }
    
    // Check and update relay 2 status
    if (relay2Active) {
        unsigned long relay2Elapsed = currentMillis - relay2StartTime;
        if (relay2Elapsed >= COUNTDOWN_TIME) {
            relay2Active = false;
            digitalWrite(RELAY2_PIN, LOW);
            Serial.println("Relay 2 timer completed - turned OFF");
        } else {
            controlWarningLED(COUNTDOWN_TIME - relay2Elapsed);
        }
    }
    
    // Status update every CHECK_INTERVAL
    if (currentMillis - previousMillis >= CHECK_INTERVAL) {
        previousMillis = currentMillis;
        
        // Check WiFi and Internet status
        if (WiFi.status() != WL_CONNECTED) {
            connectionStatus = 0;  // No WiFi
        } else {
            if (checkInternet()) {
                connectionStatus = 2;  // WiFi + Internet
            } else {
                connectionStatus = 3;  // WiFi but no Internet
            }
        }

        // Print status report
        Serial.println("\n=== Status Report ===");
        Serial.print("Time: ");
        Serial.print(currentMillis / 1000);
        Serial.println(" seconds");
        
        if (WiFi.status() == WL_CONNECTED) {
            Serial.println("WiFi: Connected");
            Serial.print("IP Address: ");
            Serial.println(WiFi.localIP());
            Serial.print("Signal Strength (RSSI): ");
            Serial.print(WiFi.RSSI());
            Serial.println(" dBm");
            
            if (connectionStatus == 2) {
                Serial.println("Internet: Connected");
            } else if (connectionStatus == 3) {
                Serial.println("Internet: Not Connected");
            }
        } else {
            Serial.println("WiFi: Not Connected");
        }

        // Print relay status
        if (relay1Active) {
            unsigned long remaining = (relay1StartTime + COUNTDOWN_TIME - currentMillis) / 1000;
            Serial.print("Relay 1: ON, Time remaining: ");
            Serial.print(remaining / 60);
            Serial.print(":");
            Serial.println(remaining % 60);
        } else {
            Serial.println("Relay 1: OFF");
        }
        if (relay2Active) {
            unsigned long remaining = (relay2StartTime + COUNTDOWN_TIME - currentMillis) / 1000;
            Serial.print("Relay 2: ON, Time remaining: ");
            Serial.print(remaining / 60);
            Serial.print(":");
            Serial.println(remaining % 60);
        } else {
            Serial.println("Relay 2: OFF");
        }
        Serial.println("===================");
    }

    // Control WiFi status LED
    switch (connectionStatus) {
        case 0:  // No WiFi - Fast blink
            if ((currentMillis % FAST_BLINK) < (FAST_BLINK/2)) {
                digitalWrite(LED_WIFI_PIN, HIGH);
            } else {
                digitalWrite(LED_WIFI_PIN, LOW);
            }
            break;
        
        case 1:  // WiFi connected - LED off
            digitalWrite(LED_WIFI_PIN, LOW);
            break;
        
        case 2:  // WiFi + Internet - Slow blink
            if ((currentMillis % SLOW_BLINK) < (SLOW_BLINK/2)) {
                digitalWrite(LED_WIFI_PIN, HIGH);
            } else {
                digitalWrite(LED_WIFI_PIN, LOW);
            }
            break;
        
        case 3:  // WiFi but no Internet - LED on
            digitalWrite(LED_WIFI_PIN, HIGH);
            break;
    }
}

/*
 * ESP32_TimerRelay_Controller v1.1.1
 * 
 * คุณสมบัติหลัก:
 * 1. ระบบรีเลย์:
 *    - ทำงาน 40 นาที
 *    - กดค้าง 2.5 วินาทีเพื่อปิดทันที (ในช่วง 37 นาทีแรก)
 *    - รีเซ็ตเวลาได้ในช่วง 3 นาทีสุดท้าย
 * 
 * 2. ระบบแจ้งเตือน:
 *    - 3 นาทีสุดท้าย LED กะพริบช้า
 *    - 30 วินาทีสุดท้าย LED กะพริบเร็ว
 *
 * 3. ระบบแสดงสถานะ WiFi:
 *    - กะพริบเร็ว = ไม่มี WiFi
 *    - กะพริบช้า = มี WiFi และอินเทอร์เน็ต
 *    - ติดค้าง = มี WiFi แต่ไม่มีอินเทอร์เน็ต
 *
 * 4. การรายงานผล:
 *    - แสดงสถานะผ่าน Serial ทุก 10 วินาที
 *    - แสดงเวลาที่เหลือของแต่ละรีเลย์
 *    - แจ้งเตือนเมื่อมีการกดสวิตช์
 * 
 * แผนการพัฒนาต่อ:
 * 1. เพิ่ม Web Interface
 * 2. เพิ่มการตั้งค่าเวลาได้
 * 3. เพิ่มการแจ้งเตือนผ่าน LINE
 * 4. เพิ่มระบบบันทึกข้อมูลการใช้งาน
 */
